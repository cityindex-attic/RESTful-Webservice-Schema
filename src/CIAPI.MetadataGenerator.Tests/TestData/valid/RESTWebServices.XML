<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RESTWebServices</name>
    </assembly>
    <members>
        <member name="T:RESTWebServices.IWatchlistService">
            <summary>
            Manage client watch list
            </summary>
            <smd />
        </member>
        <member name="M:RESTWebServices.IWatchlistService.GetWatchlists">
            <summary>
             Gets all watchlists for the user account.
            </summary>
            <returns></returns>
             <smd 
             group="Watchlist" 
             throttleScope="data"
             cacheDuration="0"
             />
        </member>
        <member name="M:RESTWebServices.IWatchlistService.SaveWatchlist(RESTWebServicesDTO.Request.ApiSaveWatchlistRequestDTO)">
            <summary>
             Save watchlist. 
            </summary>
            <param name="apiSaveWatchlistRequestDto">The watchlist to save.</param>
            <returns></returns>
             <smd 
             group="Watchlist" 
             throttleScope="data"
             cacheDuration="0"
             />
        </member>
        <member name="M:RESTWebServices.IWatchlistService.DeleteWatchlist(RESTWebServicesDTO.Request.ApiDeleteWatchlistRequestDTO)">
            <summary>
             Delete a watchlist.
             </summary>
             <param name="deleteWatchlistRequestDto">The watchlist to delete.</param>
             <returns></returns>
             <smd 
             group="Watchlist" 
             throttleScope="data"
             cacheDuration="0"
             />
        </member>
        <member name="T:RESTWebServices.WatchlistService">
            <summary>
             Watchlist
            </summary>
        </member>
        <member name="T:RESTWebServices.ServiceBase">
            <summary>
            Contains common functionality used by all services
            </summary>
        </member>
        <member name="M:RESTWebServices.ServiceBase.ThrowWebException(System.Net.HttpStatusCode,RESTWebServicesDTO.ErrorCode,System.String)">
            <summary>
             Throws an exception that gets translated into an appropriate JSON error response
            </summary>
            <param name="httpStatusCode"></param>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
            <exception cref="T:Microsoft.ServiceModel.Web.WebProtocolException"></exception>
        </member>
        <member name="M:RESTWebServices.ServiceBase.AddCORSHeadersToResponse">
            <summary>
            CORS headers in the response are needed to support cross domain JavaScript calls.
            They should only be added when NOT returning an error response.
            </summary>
        </member>
        <member name="M:RESTWebServices.ServiceBase.FinaliseResponse``1(``0)">
            <summary>
            Handles last minute request processing; doing things like adding CORS headers if appropriate
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:RESTWebServices.ServiceBase.GetGatewayResponse``1(UTPMessaging.IRequestChannelFactory,GatewayCoreDTO.Request.GatewayRequestDTO)">
            <summary>
            Makes Gateway Handler request, handling gateway errors
            </summary>
            <typeparam name="T">The expected gateway return type.  Will never be null</typeparam>
            <param name="requestChannelFactory">The gateway request channel factory</param>
            <param name="gatewayRequestDTO">the request dto to send to the gateway handler</param>
            <returns></returns>
        </member>
        <member name="M:RESTWebServices.WatchlistService.#ctor(UTPMessaging.IRequestChannelFactory,UTPMessaging.IRequestChannelFactory)">
            <summary>
             Watchlist constructor with channel factories
            </summary>
        </member>
        <member name="M:RESTWebServices.WatchlistService.#ctor">
            <summary>
             Watchlist constructor
            </summary>
        </member>
        <member name="M:RESTWebServices.WatchlistService.UpdateUserWatchlistsDispayOrder(RESTWebServicesDTO.Request.UpdateWatchlistDisplayOrderRequestDTO)">
            <summary>
             Update user watchlists
            </summary>
            <param name="updateWatchlistDisplayOrderRequestDTO"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:RESTWebServices.ICfdMarkets">
            <smd/>
        </member>
        <member name="M:RESTWebServices.ICfdMarkets.ListCfdMarkets(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Returns a list of CFD markets filtered by market name and/or market code. Leave the market name and code parameters empty to return all markets available to the User. 
            </summary>
            <param name="searchByMarketName" minLength="1" maxLength="120" demoValue="voda">The characters that the CFD market name starts with (Optional).</param>
            <param name="searchByMarketCode" minLength="1" maxLength="50">The characters that the market code starts with, normally this is the RIC code for the market (Optional).</param>
            <param name="clientAccountId" minimum="1" maximum="2147483647" demoValue="123456" required="true">The logged on user&apos;s ClientAccountId. This only shows you the markets that the user can trade. (Required).</param>
            <param name="maxResults" minimum="1" maximum="200" demoValue="20" default="20">The maximum number of markets to return.</param>
            <returns>A list of markets matching all of the search criteria</returns>
            <smd group="CFD Markets" 
                 throttleScope="data" 
                 cacheDuration="0" />
        </member>
        <member name="T:RESTWebServices.Interceptors.HttpMethodOverrideInterceptor">
            <summary>
            </summary>
        </member>
        <member name="M:RESTWebServices.Interceptors.HttpMethodOverrideInterceptor.DoProcessRequest(WCFRequestContextFacade.RequestContextFacade)">
            <summary>
            </summary>
            <param name="requestContextFacade"></param>
        </member>
        <member name="T:RESTWebServices.Interceptors.MoveClientAccountAndTradingAccountFromQueryStringToHeader">
            <summary>
            </summary>
        </member>
        <member name="M:RESTWebServices.Interceptors.MoveClientAccountAndTradingAccountFromQueryStringToHeader.DoProcessRequest(WCFRequestContextFacade.RequestContextFacade)">
            <summary>
            </summary>
            <param name="requestContextFacade"></param>
        </member>
        <member name="F:RESTWebServices.Default.form1">
            <summary>
            form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:RESTWebServices.IReadAndReturn">
            <summary>
            
            </summary>
        </member>
        <member name="M:RESTWebServices.IReadAndReturn.GetDefaultResponse">
            <summary>
            sample Url:
            </summary>
            <smd exclude="true" />
        </member>
        <member name="T:RESTWebServices.IErrors">
            <summary>
            </summary>
             <smd/>
        </member>
        <member name="M:RESTWebServices.IErrors.GenerateException(System.Int32)">
            <summary>
            Raises an error condition when an unexpected or uncontrolled event occurs.
            </summary>
            <param name="errorCode" demoValue="4000">The error code for the condition encountered.</param>
            <returns></returns>
            <smd group="Exception Handling" throttleScope="data" cacheDuration="0"/>
        </member>
        <member name="T:RESTWebServices.ISpreadMarkets">
            <smd/>
        </member>
        <member name="M:RESTWebServices.ISpreadMarkets.ListSpreadMarkets(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Returns a list of Spread Betting markets filtered by market name and/or market code.
            Leave the market name and code parameters empty to return all markets available to the User.
            </summary>
            <param name="searchByMarketName" minLength="1" maxLength="120" demoValue="voda">The characters that the Spread market name starts with (Optional).</param>
            <param name="searchByMarketCode" minLength="1" maxLength="50" demoValue="VOD.L">The characters that the Spread market code starts with, normally this is the RIC code for the market (Optional).</param>
            <param name="clientAccountId" minimum="1" maximum="84272157" demoValue="123456">The logged on user&apos;s ClientAccountId. (This only shows you markets that you can trade on.)</param>
            <param name="maxResults" minimum="1" maximum="500" demoValue="20" optional="true" default="20">The maximum number of markets to return.</param>
            <returns>A list of markets matching all of the search criteria</returns>
            <smd group="Spread Markets" cacheDuration="0" throttleScope="data"/>
        </member>
        <member name="T:RESTWebServices.IApiMessagesService">
            <smd/>
        </member>
        <member name="M:RESTWebServices.IApiMessagesService.GetMessage(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="language"></param>
            <param name="category"></param>
            <returns></returns>
            <smd group="Messages" 
                 cacheDuration="3600000" />
        </member>
        <member name="M:RESTWebServices.IApiMessagesService.GetMessagePopup(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="language"></param>
            <param name="clientAccountId"></param>
            <returns></returns>
            <smd group="Messages" cacheDuration="0" />
        </member>
        <member name="M:RESTWebServices.IApiMessagesService.AcceptOrRejectMessagePopupResponse(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="clientAccountId"></param>
            <param name="accepted"></param>
            <smd group="Messages" cacheDuration="0"/>
        </member>
        <member name="M:RESTWebServices.IApiMessagesService.GetSystemLookup(System.String,System.Int32)">
            <summary>
            Use the message lookup service to get localised textual names for the various status code &amp; Ids returned by the API. 
            For example, a query for OrderStatusReasons will contain text names for all the possible values of OrderStatusReason in the ApiOrderResponseDTO.
            You should only request the list once per session (for each entity you're interested in).
            </summary>
            <param name="lookupEntityName">The entity to lookup (eg OrderStatusReason, InstructionStatusReason, OrderApplicability or Culture)</param>
            <param name="cultureId">The cultureId used to override the translated text description. (optional)</param>
            <smd group="Messages" cacheDuration="3600000"/>
        </member>
        <member name="M:RESTWebServices.IApiMessagesService.GetClientApplicationMessageTranslation(System.Int32,System.Int32,System.Int32)">
            <summary>
            Use the message translation service to get client specific translated textual strings.
            </summary>
            <param name="clientApplicationId">Client application identifier. (optional)</param>
            <param name="cultureId">CultureId which corresponds to a culture code. (optional)</param>
            <param name="accountOperatorId">Account operator identifier. (optional)</param>
            <smd group="Messages" cacheDuration="3600000"/>
        </member>
        <member name="T:RESTWebServices.BugException">
            <summary>
             Use this to indicate when a branch of the code has been reached that 
             can only be the result of a programmer bug
            </summary>
        </member>
        <member name="M:RESTWebServices.BugException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="message">Detail on why this is a bug</param>
        </member>
        <member name="T:RESTWebServices.IAccountInformationService">
            <smd/>
        </member>
        <member name="M:RESTWebServices.IAccountInformationService.GetChartingEnabled(System.String)">
            <summary>
            Checks whether the supplied User Account is allowed to see Charting Data.
            </summary>
            <param name="id">The User Account ID to check.</param>
            <returns></returns>
            <smd group="AccountInformation" throttleScope="data" cacheDuration="0"/>
        </member>
        <member name="M:RESTWebServices.IAccountInformationService.GetClientAndTradingAccount">
            <summary>
            Returns the User's ClientAccountId and a list of their TradingAccounts. There are no parameters for this call.
            </summary>
            <returns></returns>
            <smd group="AccountInformation" throttleScope="data" cacheDuration="0"/>
        </member>
        <member name="M:RESTWebServices.IAccountInformationService.SaveAccountInformation(RESTWebServicesDTO.Request.ApiSaveAccountInformationRequestDTO)">
            <summary>
            Saves the users account information.
            </summary>
            <param name="saveAccountInformationRequest"></param>
            <returns></returns>
            <smd group="AccountInformation" throttleScope="data"/>
        </member>
        <member name="T:RESTWebServices.Authentication.ServiceValidator">
            <summary>
             Service validator
            </summary>
        </member>
        <member name="M:RESTWebServices.Authentication.ServiceValidator.ValidateTrianaTradingAccount">
            <summary>
             Validate hedge service calls against valid triana trading accounts
            </summary>
            <returns></returns>
        </member>
        <member name="T:RESTWebServices.Interceptors.ValidateSessionInteceptor">
            <summary>
            </summary>
        </member>
        <member name="M:RESTWebServices.Interceptors.ValidateSessionInteceptor.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:RESTWebServices.Interceptors.ValidateSessionInteceptor.DoProcessRequest(WCFRequestContextFacade.RequestContextFacade)">
            <summary>
            </summary>
            <param name="requestContextFacade"></param>
        </member>
        <member name="M:RESTWebServices.ISimulateOrderService.Order(RESTWebServicesDTO.Request.NewStopLimitOrderRequestDTO)">
            <summary>
            &lt;p&gt;Place an order on a particular market.&lt;/p&gt;
            &lt;p&gt;Do not set any order id fields when requesting a new order, the platform will generate them.&lt;/p&gt;
            </summary>
            <param name="order">The order request</param>      
            <smd exclude="true" />
        </member>
        <member name="M:RESTWebServices.ISimulateOrderService.CancelOrder(RESTWebServicesDTO.Request.CancelOrderRequestDTO)">
            <summary>
            &lt;p&gt;Cancel an order.  
            </summary>
            <param name="cancelOrder">The cancel order request</param>
            <smd exclude="true" />
        </member>
        <member name="M:RESTWebServices.ISimulateOrderService.UpdateOrder(RESTWebServicesDTO.Request.UpdateStopLimitOrderRequestDTO)">
            <summary>
            &lt;p&gt;Update an order (for adding a stop/limit or attaching an OCO relationship).  
            </summary>
            <param name="order"></param>
            <returns></returns>       
        </member>
        <member name="T:RESTWebServices.IAuthenticatedSmokeTestService">
            <summary>
            </summary>
        </member>
        <member name="M:RESTWebServices.IAuthenticatedSmokeTestService.DoAuthenticatedSmokeTest">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:RESTWebServices.Interceptors.MoveUniqueIdentifierFromQueryStringToHeader">
            <summary>
            </summary>
        </member>
        <member name="M:RESTWebServices.Interceptors.MoveUniqueIdentifierFromQueryStringToHeader.DoProcessRequest(WCFRequestContextFacade.RequestContextFacade)">
            <summary>
            </summary>
            <param name="requestContextFacade"></param>
        </member>
        <member name="T:RESTWebServices.ISimulateTradeService">
            <summary>
            
            </summary>
        </member>
        <member name="M:RESTWebServices.ISimulateTradeService.Trade(RESTWebServicesDTO.Request.NewTradeOrderRequestDTO)">
            <summary>
            &lt;p&gt;Simulate placing a trade on a particular market.&lt;/p&gt;
            &lt;p&gt;Do not set any order id fields when requesting a new trade, the platform will generate them.&lt;/p&gt;
            </summary>
            <param name="trade">The trade request</param>
            <smd exclude="true" />
        </member>
        <member name="M:RESTWebServices.ISimulateTradeService.UpdateTrade(RESTWebServicesDTO.Request.UpdateTradeOrderRequestDTO)">
            <summary>
            Simulate updating a trade (for adding a stop/limit etc).  
            </summary>
            <param name="update">The trade request</param> 
            <smd exclude="true" />     
        </member>
        <member name="T:RESTWebServices.IMarketPriceHistoryService">
            <summary>
            
            </summary>
            <smd/>
        </member>
        <member name="M:RESTWebServices.IMarketPriceHistoryService.GetPriceBars(System.String,System.String,System.Int32,System.String)">
            <summary>
             Get historic price bars for the specified market in OHLC (open, high, low, close) format, suitable for plotting 
             in candlestick charts. Returns price bars in ascending order up to the current time. When there are no prices for 
             a particular time period, no price bar is returned. Thus, it can appear that the array of price bars 
             has &quot;gaps&quot;, i.e. the gap between the date &amp; time of each price bar might not be equal to interval x span.
             
             Sample Urls:
             &lt;ul&gt;
                 &lt;li&gt;/market/1234/history?interval=MINUTE&amp;span=15&amp;pricebars=180&lt;/li&gt;
                 &lt;li&gt;/market/735/history?interval=HOUR&amp;span=1&amp;pricebars=240&lt;/li&gt;
                 &lt;li&gt;/market/1577/history?interval=DAY&amp;span=1&amp;pricebars=10&lt;/li&gt;
             &lt;/ul&gt;
             
            </summary>
            <param name="marketId" demoValue="71442">The marketId.</param>
            <param name="interval" demoValue="MINUTE">The pricebar interval.</param>
            <param name="span" demoValue="1">The number of each interval per pricebar.</param>
            <param name="priceBars" demoValue="15">The total number of pricebars to return.</param>
            <smd group="Price History"  cacheDuration="0" throttleScope="data"/>
        </member>
        <member name="M:RESTWebServices.IMarketPriceHistoryService.GetPriceTicks(System.String,System.String)">
            <summary>
             Get historic price ticks for the specified market.  
             Returns price ticks in ascending order up to the current time.
             The length of time that elapses between each tick is usually different.
            </summary>
            <param name="marketId" demoValue="71442">The marketId.</param>
            <param name="priceTicks" demoValue="10">The total number of price ticks to return.</param>
             <smd group="Price History"  cacheDuration="0" throttleScope="data"/>
        </member>
        <member name="T:RESTWebServices.IOrderService">
            <smd/>
        </member>
        <member name="M:RESTWebServices.IOrderService.Order(RESTWebServicesDTO.Request.NewStopLimitOrderRequestDTO)">
            <summary>
            &lt;p&gt;Place an order on a particular market.  
            &lt;p&gt;Do not set any order id fields when requesting a new order, the platform will generate them.&lt;/p&gt;
            </summary>
            <param name="order">The order request.</param>
            <smd group="Trades and Orders" throttleScope="trading" cacheDuration="0"/>
        </member>
        <member name="M:RESTWebServices.IOrderService.CancelOrder(RESTWebServicesDTO.Request.CancelOrderRequestDTO)">
            <summary>
            &lt;p&gt;Cancel an order.  
            </summary>
            <param name="cancelOrder">The cancel order request.</param>
            <smd group="Trades and Orders" cacheDuration="0"/>
        </member>
        <member name="M:RESTWebServices.IOrderService.UpdateOrder(RESTWebServicesDTO.Request.UpdateStopLimitOrderRequestDTO)">
            <summary>
            &lt;p&gt;Update an order (for adding a stop/limit or attaching an OCO relationship). 
            </summary>
            <param name="order">The update order request.</param>
            <returns></returns>
            <smd group="Trades and Orders" cacheDuration="0"/>
        </member>
        <member name="M:RESTWebServices.IOrderService.ListOrders(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Not Implemented.
            </summary>
            <param name="tradingAccountId"></param>
            <param name="openOrders"></param>
            <param name="acceptedOrders"></param>
            <smd exclude="true" />
        </member>
        <member name="M:RESTWebServices.IOrderService.ListOpenPositions(System.Int32)">
            <summary>
            &lt;p&gt;Queries for a specified trading account's trades / open positions.&lt;/p&gt;
            &lt;p&gt;This uri is intended to support a grid in a UI. One usage pattern is to subscribe to streaming orders, call this for the initial data to display in the grid, and call the HTTP service GetOpenPosition when you get updates on the order stream to get the updated data in this format.&lt;/p&gt; 
            </summary>
            <param name="tradingAccountId">The trading account to get orders for.</param>
            <smd group="Trades and Orders" cacheDuration="0"/>
        </member>
        <member name="M:RESTWebServices.IOrderService.ListActiveStopLimitOrders(System.Int32)">
            <summary>
            &lt;p&gt;Queries for a specified trading account's active stop / limit orders.&lt;/p&gt;
            &lt;p&gt;This uri is intended to support a grid in a UI. One usage pattern is to subscribe to streaming orders, call this for the initial data to display in the grid, and call the HTTP service GetActiveStopLimitOrder when you get updates on the order stream to get the updated data in this format.&lt;/p&gt;
            </summary>
            <param name="tradingAccountId">The trading account to get orders for.</param>
            <smd group="Trades and Orders" cacheDuration="0"/>
        </member>
        <member name="M:RESTWebServices.IOrderService.GetActiveStopLimitOrder(System.String)">
            <summary>
            &lt;p&gt;Queries for an active stop limit order with a specified order id. It returns a null value if the order doesn't exist, or is not an active stop limit order.&lt;p&gt;
            &lt;p&gt;This uri is intended to support a grid in a UI. One usage pattern is to subscribe to streaming orders, call the HTTP service ListActiveStopLimitOrders for the initial data to display in the grid, and call this uri when you get updates on the order stream to get the updated data in this format.&lt;/p&gt;
            &lt;p&gt;For a more comprehensive order response, see the HTTP service GetOrder
            </summary>
            <param name="orderId">The requested order id.</param>
            <smd group="Trades and Orders" cacheDuration="0"/>
        </member>
        <member name="M:RESTWebServices.IOrderService.GetOpenPosition(System.String)">
            <summary>
            &lt;p&gt;Queries for a trade / open position with a specified order id. It returns a null value if the order doesn't exist, or is not a trade / open position.&lt;/p&gt;
            &lt;p&gt;This uri is intended to support a grid in a UI. One usage pattern is to subscribe to streaming orders, call the HTTP service ListOpenPositions for the initial data to display in the grid, and call this uri when you get updates on the order stream to get the updated data in this format.&lt;/p&gt;
            &lt;p&gt;For a more comprehensive order response, see the HTTP service GetOrder
            </summary>
            <param name="orderId">The requested order id.</param>
            <smd group="Trades and Orders" cacheDuration="0"/>
        </member>
        <member name="M:RESTWebServices.IOrderService.ListTradeHistory(System.Int32,System.Int32)">
            <summary>
            &lt;p&gt;Queries for a specified trading account's trade history. The result set will contain orders with a status of &lt;b&gt;(3 - Open, 9 - Closed)&lt;/b&gt;, and includes &lt;b&gt;orders that were a trade / stop / limit order&lt;/b&gt;.&lt;/p&gt;
            &lt;p&gt;There's currently no corresponding GetTradeHistory (as with ListOpenPositions).
            </summary>
            <param name="tradingAccountId">The trading account to get orders for.</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <smd group="Trades and Orders" cacheDuration="0"/>
        </member>
        <member name="M:RESTWebServices.IOrderService.ListStopLimitOrderHistory(System.Int32,System.Int32)">
            <summary>
            &lt;p&gt;Queries for a specified trading account's stop / limit order history. The result set includes &lt;b&gt;only orders that were originally stop / limit orders&lt;/b&gt; that currently have one of the following statuses &lt;b&gt;(3 - Open, 4 - Cancelled, 5 - Rejected, 9 - Closed, 10 - Red Card)&lt;/b&gt;. &lt;/p&gt;
            &lt;p&gt;There's currently no corresponding GetStopLimitOrderHistory (as with ListActiveStopLimitOrders).&lt;/p&gt;
            </summary>
            <param name="tradingAccountId">The trading account to get orders for.</param>
            <param name="maxResults">The maximum number of results to return.</param>
            <smd group="Trades and Orders" cacheDuration="0"/>
        </member>
        <member name="M:RESTWebServices.IOrderService.GetOrder(System.String)">
            <summary>
            &lt;p&gt;Queries for an order by a specific order id.&lt;/p&gt;
            &lt;p&gt;The current implementation only returns active orders (i.e. those with a status of &lt;b&gt;1 - Pending, 2 - Accepted, 3 - Open, 6 - Suspended, 8 - Yellow Card, 11 - Triggered&lt;/b&gt;).&lt;/p&gt;
            </summary>
            <param name="orderId">The requested order id.</param>
            <smd group="Trades and Orders" cacheDuration="0"/>
        </member>
        <member name="T:RESTWebServices.ITradeService">
            <smd/>
        </member>
        <member name="M:RESTWebServices.ITradeService.Trade(RESTWebServicesDTO.Request.NewTradeOrderRequestDTO)">
            <summary>
            &lt;p&gt;Place a trade on a particular market.&lt;/p&gt;
            &lt;p&gt;Do not set any order id fields when requesting a new trade, the platform will generate them.&lt;/p&gt;
            </summary>
            <param name="trade">The trade request.</param>
            <smd group="Trades and Orders" throttleScope="trading" cacheDuration="0"/>
        </member>
        <member name="M:RESTWebServices.ITradeService.UpdateTrade(RESTWebServicesDTO.Request.UpdateTradeOrderRequestDTO)">
            <summary>
            Update a trade (for adding a stop/limit etc). 
            </summary>
            <param name="update">The update trade request.</param>
            <smd group="Trades and Orders" throttleScope="trading" cacheDuration="0"/>
        </member>
        <member name="T:RESTWebServices.ILoginService">
            <summary>
            </summary>
             <smd/>
        </member>
        <member name="M:RESTWebServices.ILoginService.LogOn(RESTWebServicesDTO.Request.ApiLogOnRequestDTO)">
            <summary>
             Create a new session.  This is how you &quot;log on&quot; to the CIAPI.  
            </summary>
            <param name="apiLogOnRequest">The request to create a session (log on).</param>
             <smd 
             group="Authentication" 
             throttleScope="data"
             cacheDuration="0"
             />
        </member>
        <member name="M:RESTWebServices.ILoginService.LogOffFromQueryString(System.String,System.String)">
            <summary>
             &lt;p&gt;Delete a session.  This is how you &quot;log off&quot; from the CIAPI.&lt;/p&gt;
            </summary>
            <param name="userName" minLength="6" maxLength="20" demoValue="CC735158">Username is case sensitive. May be set as a service parameter or as a request header.</param>
            <param name="session" format="guid" minLength="36" maxLength="36" demoValue="5998CBE8-3594-4232-A57E-09EC3A4E7AA8">The session token. May be set as a service parameter or as a request header.</param>
             <smd 
             method="DeleteSession"
             group="Authentication"
             throttleScope="data"
             cacheDuration="0"
             />
        </member>
        <member name="M:RESTWebServices.ILoginService.LogOff(RESTWebServicesDTO.Request.ApiLogOffRequestDTO)">
            <summary>
            Delete a session.  This call is obsolete but retained for backwards compatibility; please rather POST to /deleteSession
            TODO: How do I link to the DeleteSession method?
            </summary>
            <smd exclude="true"/>
        </member>
        <member name="M:RESTWebServices.ILoginService.ChangePassword(RESTWebServicesDTO.Request.ApiChangePasswordRequestDTO)">
            <summary>
            Change a user's password.
            </summary>
            <param name="apiChangePasswordRequest">The change password request details.</param>
            <smd 
            method="ChangePassword"
            group="Authentication"
            throttleScope="data"
            />  
        </member>
        <member name="T:RESTWebServices.INews">
            <smd/>
        </member>
        <member name="M:RESTWebServices.INews.ListNewsHeadlinesWithSource(System.String,System.String,System.Int32)">
            <summary>
             Get a list of current news headlines
            </summary>
            <param name="category" demoValue="UK" minLength="2" maxLength="3">Filter headlines by category. Valid categories depend on the source used:  for dj: uk|aus, for ci: SEMINARSCHINA, for mni: ALL.</param>
            <param name="maxResults" demoValue="10" default="25" minimum="1" maximum="500">Specify the maximum number of headlines returned</param>
            <param name="source" demoValue="dj">The news feed source provider. Valid options are: dj|mni|ci.</param>
             <smd group="News" cacheDuration="10000" throttleScope="data"/>
        </member>
        <member name="M:RESTWebServices.INews.ListNewsHeadlinesWithoutCategory(System.String,System.Int32)">
            <smd exclude="true" />
        </member>
        <member name="M:RESTWebServices.INews.GetNewsDetail(System.String,System.String)">
            <summary>
             Get the detail of the specific news story matching the story Id in the parameter. 
            </summary>
            <param name="storyId" demoValue="12654" minLength="1" maxLength="9">The news story Id.</param>
            <param name="source" demoValue="dj">The news feed source provider. Valid options are dj|mni|ci.</param>
             <smd group="News" cacheDuration="10000" throttleScope="data"/>
        </member>
        <member name="M:RESTWebServices.INews.ListNewsHeadlines(System.String,System.Int32)">
            <smd exclude="true" />
        </member>
        <member name="T:RESTWebServices.IFutureOptionService">
            <summary>
            Place a future or option trade
            </summary>
            <smd />
        </member>
        <member name="M:RESTWebServices.IFutureOptionService.Future(RESTWebServicesDTO.Request.NewFutureOptionRequestDTO)">
            <summary>
            Future or option request
            </summary>
            <param name="futureOption"></param>
        </member>
        <member name="T:RESTWebServices.FutureOptionService">
            <summary>
             Book future or option request from Triana
            </summary>
        </member>
        <member name="M:RESTWebServices.FutureOptionService.#ctor">
            <summary>
             Futures Service provide handler factory
            </summary>
        </member>
        <member name="M:RESTWebServices.FutureOptionService.#ctor(UTPMessaging.IRequestChannelFactory)">
            <summary>
             Futures service
            </summary>
            <param name="futureOptionChannelFactory"></param>
        </member>
        <member name="T:RESTWebServices.IHedgeService">
            <summary>
            Place a hedge trade
            </summary>
            <smd />
        </member>
        <member name="M:RESTWebServices.IHedgeService.Hedge(RESTWebServicesDTO.Request.NewFxHedgeRequestDTO)">
            <summary>
            Hedge service
            </summary>
            <param name="hedge"></param>
            <smd exclude="true" />
        </member>
        <member name="M:RESTWebServices.HedgeService.#ctor">
            <summary>
             Hedge Service provide handler factory
            </summary>
        </member>
        <member name="M:RESTWebServices.HedgeService.#ctor(UTPMessaging.IRequestChannelFactory,RESTWebServices.Authentication.ServiceValidator)">
            <summary>
             Hedge service
            </summary>
            <param name="hedgeChannelFactory"></param>
            <param name="serviceValidator"></param>
        </member>
        <member name="T:RESTWebServices.ISmokeTestService">
            <summary>
            </summary>
        </member>
        <member name="M:RESTWebServices.ISmokeTestService.DoSmokeTest">
            <summary>
            </summary>
            <returns></returns>
            <smd exclude="true" />
        </member>
        <member name="T:RESTWebServices.Interceptors.MoveSessionAndUseridFromQueryStringToHeader">
            <summary>
            </summary>
        </member>
        <member name="M:RESTWebServices.Interceptors.MoveSessionAndUseridFromQueryStringToHeader.DoProcessRequest(WCFRequestContextFacade.RequestContextFacade)">
            <summary>
            </summary>
            <param name="requestContextFacade"></param>
        </member>
        <member name="T:RESTWebServices.ServiceHostFactory.G2AuthenticatedServiceHostFactory">
            <summary>
            </summary>
        </member>
        <member name="T:RESTWebServices.UrlMapper">
            <summary>
            </summary>
        </member>
        <member name="T:RESTWebServices.UrlMapper.UrlMap">
            <summary>
            </summary>
        </member>
        <member name="M:RESTWebServices.UrlMapper.UrlMap.#ctor(System.String,System.String,System.String)">
            <summary>
            </summary>
            <param name="urlPattern"></param>
            <param name="filePath"></param>
            <param name="pathInfo"></param>
        </member>
        <member name="P:RESTWebServices.UrlMapper.UrlMap.UrlPattern">
            <summary>
            Incoming Urls are always transformed to lowercase
            </summary>
        </member>
        <member name="P:RESTWebServices.UrlMapper.UrlMap.FilePath">
            <summary>
            </summary>
        </member>
        <member name="P:RESTWebServices.UrlMapper.UrlMap.PathInfo">
            <summary>
            </summary>
        </member>
        <member name="T:RESTWebServices.IMarketInformationService">
            <smd/>
        </member>
        <member name="M:RESTWebServices.IMarketInformationService.GetMarketInformation(System.String)">
            <summary>
            &lt;p&gt;Get Market Information for the single specified market supplied in the parameter.&lt;/p&gt;
            </summary>
            <param name="marketId" demoValue="71442">The marketId.</param>
            <returns></returns>
            <smd group="Market" throttleScope="data" cacheDuration="1000"/>
        </member>
        <member name="M:RESTWebServices.IMarketInformationService.ListMarketInformationSearch(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            &lt;p&gt;Returns market information for the markets that meet the search criteria.&lt;/p&gt;
            The search can be performed by market code and/or market name, and can include CFDs and Spread Bet markets. 
            </summary>
            <param name="searchByMarketCode" demoValue="true">Sets the search to use market code.</param>
            <param name="searchByMarketName" demoValue="true">Sets the search to use market Name.</param>
            <param name="spreadProductType" demoValue="true">Sets the search to include spread bet markets.</param>
            <param name="cfdProductType" demoValue="true">Sets the search to include CFD markets.</param>
            <param name="binaryProductType" demoValue="true">Sets the search to include binary markets.</param>
            <param name="query" demoValue="UK 100">The text to search for. Matches part of market name / code from the start.</param>
            <param name="maxResults" demoValue="50">The maximum number of results to return.</param>
            <returns></returns>
            <smd group="Market" throttleScope="data" cacheDuration="0"/>
        </member>
        <member name="M:RESTWebServices.IMarketInformationService.SearchWithTags(System.String,System.Int32,System.Int32)">
            <summary>
            Get market information and tags for the markets that meet the search criteria.
            </summary>
            <param name="query" demoValue="UK 100">The text to search for. Matches part of market name / code from the start.</param>
            <param name="maxResults" demoValue="50">The maximum number of results to return.  Default is 20.</param>
            <param name="tagId" demoValue="0">The ID for the tag to be searched (optional).</param>
            <returns>A list of markets and a second list of tags.</returns>
            <smd group="Market" throttleScope="data" cacheDuration="0"/>
        </member>
        <member name="M:RESTWebServices.IMarketInformationService.TagLookup">
            <summary>
            &lt;p&gt;Gets all of the tags the the requesting user is allowed to see.  Tags are returned in a primary / secondary hierarchy.&lt;/p&gt;
            </summary>
            <returns>A list of tags in a primary / secondary hierarchy.</returns>
            <smd group="Market" throttleScope="data" cacheDuration="0"/>
        </member>
        <member name="M:RESTWebServices.IMarketInformationService.ListMarketInformation(RESTWebServicesDTO.Request.ListMarketInformationRequestDTO)">
            <summary>
            Get Market Information for the specified list of markets.  
            </summary>
            <param name="listMarketInformationRequestDTO"></param>
            <returns></returns>
            <smd group="Market" throttleScope="data" cacheDuration="1000"/>
        </member>
        <member name="M:RESTWebServices.IMarketInformationService.SaveMarketInformation(RESTWebServicesDTO.Request.SaveMarketInformationRequestDTO)">
            <summary>
            Save Market Information for the specified list of markets.   
            </summary>
            <param name="listMarketInformationRequestSaveDTO"></param>
            <smd group="Market" throttleScope="data" cacheDuration="0"/>
        </member>
    </members>
</doc>
